
on init
  
  { This script was written by David Hilowitz, with advice from EvilDragon. } 
  
  { Assumptions: you will have a bunch of different groups. Each unique "set" of round robin groups will consist of a bunch of groups. }

  { 
    CONFIGURATION
    The three variables below are the ones that you will need to configure your round robins. 
  }
  { The number of independent round robin sets the engine should track. }
  declare const $NUM_SETS := 3
  { 
   The maximum number of round robins. In other words, the number of round robins in the set 
   that contains the most different groups. 
  }
  declare const $MAX_RR := 5
  
  { 
    The actual round robin groups. This multi-dimensional array variable contains the group IDs 
    for each individual round robin set. You'll want to replace these group numbers with the IDs 
    of the groups for each set. It's in a very particular format, so you'll want to study the example very carefully. Basically it's set up so that each line contains the group for a different "set" of
    round robins that need to be tracked. There should be exactly the same number of "rows" in this multi-dimensional array as you put in your $NUM_SETS variable above. So if you have four sets of round robins, then you need to have four rows below. Since multi-dimensional arrays are perfectly rectangular, every line needs to have the same number of elements. Specifically, the number of elements in every line needs to match what you put in $MAX_RR above. That being said, you don't need to have that many round robins in each group. If you have fewer than the $MAX_RR round robins in a given set, fill the remainder of the line with -1s. 
    
    So, for example, if you have one round robin set that has four (4) groups, and two that have only three (3) 
    groups, you would set your $MAX_RR to 4. Then, you would configure your array so that the first set has four 
    groups specified. On the following two lines, you would specify the other two sets. Since each of those two sets only has three round robin groups, the final element in each line will be a -1:

    declare %round_robin_groups[$NUM_SETS * $MAX_RR] := (...
     0,  1,  2,  3, -1, ...
     4,  5, -1, -1, -1, ...
     6,  7,  8, -1, -1)    
   
    Another thing to take of note of in the example above is the 

  } 
  declare %round_robin_groups[$NUM_SETS * $MAX_RR] := (...
     0,  1,  2,  3, -1,    { RR set #1}...
     4,  5, -1, -1, -1,    { RR set #2}...
     6,  7,  8, -1, -1)    { RR set #3}

  { Temp variables. You should not need to modify any of these variables below. }

  declare %set_position[$NUM_SETS] := (-1)
  declare %set_last_position[$NUM_SETS] := (0)

  declare $current_set := 0
  declare $current_set_num_groups
  declare %current_set_groups[$MAX_RR] 
  declare $current_set_position
  declare $current_set_last_position
  declare $x
  declare $y

  declare @debug { remove this and the debug section below after testing }

  message("")
end on

on note
  disallow_group($ALL_GROUPS)
  
  $current_set := 0
  
  { this giant for (while) loop iterates through all of the groups and advances the round robin counters for all of the sets }
  while($current_set < $num_sets)
  
    { copy set variables for the current set to temp variables }
    $x := 0
    while((%round_robin_groups[$current_set * $MAX_RR + $x] # -1) and ($current_set * $MAX_RR + $x < num_elements(%round_robin_groups)))  
      %current_set_groups[$x] := %round_robin_groups[$current_set * $MAX_RR + $x]
      inc($x)
    end while
    $current_set_num_groups := $x
    $current_set_position := %set_position[$current_set]
    $current_set_last_position := %set_last_position[$current_set]

    { Round robin stuff }

    inc($current_set_position)
    
    { if all groups in the list have been played, fill the list with all groups in random }
    { order, and make sure the last played group is not the first in the new list }
    if($current_set_position >= $current_set_num_groups or $current_set_position = -1)
    
      { remember last played group }
      $current_set_last_position := %current_set_groups[$current_set_num_groups - 1]
      
      { fill list with all groups in random order }
      { %groups[0] := 0 }
      $current_set_position := 1
      while($current_set_position # $current_set_num_groups)
        $x := random(0, $current_set_position)
        $y := %current_set_groups[$current_set_position]
        %current_set_groups[$current_set_position] := %current_set_groups[$x]
        %current_set_groups[$x] := $y
        inc($current_set_position)
      end while
      $current_set_position := 0
      
      { if the last played group is first in the new list, swap first and last in the list }
      if(%current_set_groups[0] = $current_set_last_position)
        %current_set_groups[0] := %current_set_groups[$current_set_num_groups - 1]
        %current_set_groups[$current_set_num_groups - 1] := $current_set_last_position
      end if

      { debug: show list }
      $x := 0
      @debug := "RR Set " & ($current_set + 1) & "; Position: " & $current_set_position & "; Group list:"
      while($x < $current_set_num_groups)
        @debug := @debug & " " & %current_set_groups[$x]
        inc($x)
      end while
      message(@debug)
      { debug end }
    end if
    
    { enable a group from the list }
    allow_group(%current_set_groups[$current_set_position])

    { copy temp variables back to set variables}
    $x := 0
    while(($x < $current_set_num_groups) and ($current_set * $MAX_RR + $x < num_elements(%round_robin_groups)))  
      %round_robin_groups[$current_set * $MAX_RR + $x] := %current_set_groups[$x]
      inc($x)
    end while
    %set_position[$current_set] := $current_set_position
    %set_last_position[$current_set] := $current_set_last_position

    inc($current_set)
  end while
end on
